(window.webpackJsonp=window.webpackJsonp||[]).push([[52],{366:function(e,a,s){"use strict";s.r(a);var t=s(7),r=Object(t.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"webpack搭建本地服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack搭建本地服务器"}},[e._v("#")]),e._v(" Webpack搭建本地服务器")]),e._v(" "),a("h2",{attrs:{id:"一-为什么要搭建本地服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-为什么要搭建本地服务器"}},[e._v("#")]),e._v(" 一. 为什么要搭建本地服务器？")]),e._v(" "),a("p",[e._v("◼ 目前我们开发的代码，为了运行需要有两个操作：")]),e._v(" "),a("p",[e._v(" 操作一：npm run build，编译相关的代码；")]),e._v(" "),a("p",[e._v(" 操作二：通过live server或者直接通过浏览器，打开index.html代码，查看效果；")]),e._v(" "),a("p",[e._v("◼ 这个过程经常操作会影响我们的开发效率，我们希望可以做到，当文件发生变化时，可以自动的完成 编译 和 展示；")]),e._v(" "),a("p",[e._v("◼ 为了完成自动编译，webpack提供了几种可选的方式：")]),e._v(" "),a("p",[e._v(" webpack watch mode；")]),e._v(" "),a("p",[e._v(" webpack-dev-server（常用）；")]),e._v(" "),a("p",[e._v(" webpack-dev-middleware；")]),e._v(" "),a("h2",{attrs:{id:"二-webpack-dev-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-webpack-dev-server"}},[e._v("#")]),e._v(" 二. webpack-dev-server")]),e._v(" "),a("h3",{attrs:{id:"_2-1-安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-安装"}},[e._v("#")]),e._v(" 2.1 安装")]),e._v(" "),a("div",{staticClass:"language-node line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("npm install webpack-dev-server -D\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("blockquote",[a("p",[e._v("webpack-dev-server 在编译之后不会写入到任何输出文件，而是将 bundle 文件保留在内存中：")])]),e._v(" "),a("blockquote",[a("p",[e._v("事实上webpack-dev-server使用了一个库叫memfs（memory-fs webpack自己写的）")])]),e._v(" "),a("h3",{attrs:{id:"_2-2-使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-使用"}},[e._v("#")]),e._v(" 2.2 使用")]),e._v(" "),a("div",{staticClass:"language-node line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("webpack serve\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br")])]),a("h3",{attrs:{id:"_2-3-配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-配置"}},[e._v("#")]),e._v(" 2.3 配置")]),e._v(" "),a("p",[e._v("webpack.config.js里添加devServer对象")]),e._v(" "),a("ol",[a("li",[a("code",[e._v("hot")]),e._v(": true     开启热模块跟新")]),e._v(" "),a("li",[a("code",[e._v("host")]),e._v(":  主机名    默认是localhost = 127.0.0.1")]),e._v(" "),a("li",[a("code",[e._v("port")]),e._v(": 端口号")]),e._v(" "),a("li",[a("code",[e._v("open")]),e._v(": true   自动打开浏览器")]),e._v(" "),a("li",[a("code",[e._v("conpress")]),e._v(": true   对文件进行压缩")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://markdown123.oss-cn-beijing.aliyuncs.com/img/20230623001740.png",alt:""}})]),e._v(" "),a("h2",{attrs:{id:"二-认识模块热替换-hmr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-认识模块热替换-hmr"}},[e._v("#")]),e._v(" 二. 认识模块热替换（HMR）")]),e._v(" "),a("h3",{attrs:{id:"_2-1-什么是hmr呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-什么是hmr呢"}},[e._v("#")]),e._v(" 2.1 什么是HMR呢？")]),e._v(" "),a("p",[e._v(" HMR的全称是Hot Module Replacement，翻译为模块热替换；")]),e._v(" "),a("p",[e._v(" 模块热替换是指在 应用程序运行过程中，替换、添加、删除模块，而无需重新刷新整个页面；")]),e._v(" "),a("h3",{attrs:{id:"_2-2-hmr通过如下几种方式-来提高开发的速度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-hmr通过如下几种方式-来提高开发的速度"}},[e._v("#")]),e._v(" 2.2 HMR通过如下几种方式，来提高开发的速度：")]),e._v(" "),a("p",[e._v(" 不重新加载整个页面，这样可以保留某些应用程序的状态不丢失；")]),e._v(" "),a("p",[e._v(" 只更新需要变化的内容，节省开发的时间；")]),e._v(" "),a("p",[e._v(" 修改了css、js源代码，会立即在浏览器更新，相当于直接在浏览器的devtools中直接修改样式；")]),e._v(" "),a("h3",{attrs:{id:"_2-3-如何使用hmr呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-如何使用hmr呢"}},[e._v("#")]),e._v(" 2.3 如何使用HMR呢？")]),e._v(" "),a("p",[e._v(" 默认情况下，webpack-dev-server已经支持HMR，我们只需要开启即可（默认已经开启）；")]),e._v(" "),a("p",[e._v(" 在不开启HMR的情况下，当我们修改了源代码之后，整个页面会自动刷新，使用的是live reloading；")]),e._v(" "),a("p",[e._v("修改webpack的配置：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://markdown123.oss-cn-beijing.aliyuncs.com/img/20230623001914.png",alt:""}})]),e._v(" "),a("h3",{attrs:{id:"_2-4-浏览器可以看到如下效果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-浏览器可以看到如下效果"}},[e._v("#")]),e._v(" 2.4 浏览器可以看到如下效果：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://markdown123.oss-cn-beijing.aliyuncs.com/img/20230623001933.png",alt:""}})]),e._v(" "),a("p",[e._v("但是你会发现，当我们修改了某一个模块的代码时，依然是刷新的整个页面：")]),e._v(" "),a("p",[e._v("这是因为我们需要去指定哪些模块发生更新时，进行HMR；")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://markdown123.oss-cn-beijing.aliyuncs.com/img/20230623001946.png",alt:""}})]),e._v(" "),a("h3",{attrs:{id:"框架的hmr"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#框架的hmr"}},[e._v("#")]),e._v(" 框架的HMR")]),e._v(" "),a("p",[e._v("◼ 有一个问题：在开发其他项目时，我们是否需要经常手动去写入 module.hot.accpet相关的API呢？")]),e._v(" "),a("p",[e._v(" 比如开发Vue、React项目，我们修改了组件，希望进行热更新，这个时候应该如何去操作呢？")]),e._v(" "),a("p",[e._v("◼ 事实上社区已经针对这些有很成熟的解决方案了：")]),e._v(" "),a("p",[e._v(" 比如vue开发中，我们使用vue-loader，此loader支持vue组件的HMR，提供开箱即用的体验；")]),e._v(" "),a("p",[e._v(" 比如react开发中，有React Hot Loader，实时调整react组件（目前React官方已经弃用了，改成使用react-refresh）；")]),e._v(" "),a("h2",{attrs:{id:"三-如何区分开发环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-如何区分开发环境"}},[e._v("#")]),e._v(" 三. 如何区分开发环境")]),e._v(" "),a("p",[e._v("在webpack.config.js里面有个mode属性")]),e._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("mode")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'development'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 开发模式")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[e._v("mode")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'production'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//生产模式")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br")])]),a("p",[e._v("◼ 目前我们所有的webpack配置信息都是放到一个配置文件中的：webpack.config.js")]),e._v(" "),a("p",[e._v(" 当配置越来越多时，这个文件会变得越来越不容易维护；")]),e._v(" "),a("p",[e._v(" 并且某些配置是在开发环境需要使用的，某些配置是在生成环境需要使用的，当然某些配置是在开发和生成环境都会使用的；")]),e._v(" "),a("p",[e._v(" 所以，我们最好对配置进行划分，方便我们维护和管理；")]),e._v(" "),a("h3",{attrs:{id:"区分不同的配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区分不同的配置"}},[e._v("#")]),e._v(" 区分不同的配置")]),e._v(" "),a("p",[a("strong",[e._v("步骤")])]),e._v(" "),a("ol",[a("li",[e._v("创建config文件夹")]),e._v(" "),a("li",[e._v("创建webpack.dev.js")]),e._v(" "),a("li",[e._v("创建webpack.prod.js")])]),e._v(" "),a("p",[a("strong",[e._v("修改脚本")])]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('"scripts": {\n    "dev": "webpack --config ./config/webpack.dev.js",\n    "build": "webpack --config ./config/webpack.prod.js"\n}\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br")])]),a("h2",{attrs:{id:"四-入口文件解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-入口文件解析"}},[e._v("#")]),e._v(" 四. 入口文件解析")]),e._v(" "),a("p",[e._v("◼ 我们之前编写入口文件的规则是这样的：./src/index.js，但是如果我们的配置文件所在的位置变成了 config 目录，我们是否应该变成 ../src/index.js呢？（不需要）")]),e._v(" "),a("p",[e._v(" 如果我们这样编写，会发现是报错的，依然要写成 ./src/index.js；")]),e._v(" "),a("p",[e._v(" 这是因为入口文件其实是和另一个属性时有关的 context；")]),e._v(" "),a("p",[e._v("◼ context的作用是用于解析入口（entry point）和加载器（loader）：")]),e._v(" "),a("p",[e._v(" 官方说法：默认是当前路径（但是经过我测试，默认应该是webpack的启动目录）")]),e._v(" "),a("p",[e._v(" 另外推荐在配置中传入一个值；")]),e._v(" "),a("blockquote",[a("p",[e._v("entry指向的路径跟context设置有关，context默认指向webpack的启动目录，所以不需要更改entry入口路径")])])])}),[],!1,null,null,null);a.default=r.exports}}]);